class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head is None or head.next is None:
            return False
        slow = head
        fast = head.next
        while slow != fast:
            if fast is None or fast.next is None:
                return False
            slow = slow.next
            fast = fast.next.next
        return True

    @staticmethod
    def create_linked_list_with_cycle(values, pos):
        if not values:
            return None
        head = ListNode(values[0])
        current = head
        cycle_node = None

        for i in range(1, len(values)):
            current.next = ListNode(values[i])
            current = current.next
            if i == pos:
                cycle_node = current

        if pos != -1:
            current.next = cycle_node

        return head

def main():
    solution = Solution()

    values1 = [3, 2, 0, -4]
    cyclic_list = Solution.create_linked_list_with_cycle(values1, 1)
    print("Cyclic jagsaaltin test:", solution.hasCycle(cyclic_list))

    values2 = [1, 2]
    non_cyclic_list = Solution.create_linked_list_with_cycle(values2, -1)
    print("Non-Cyclic jagsaaltin test:", solution.hasCycle(non_cyclic_list))

    values3 = [1]
    single_node_list = Solution.create_linked_list_with_cycle(values3, -1)
    print("Single node jagsaaltin test:", solution.hasCycle(single_node_list))

if __name__ == "__main__":
    main()
