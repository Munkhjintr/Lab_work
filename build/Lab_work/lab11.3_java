import java.util.*;

class Solution {
    public int openLock(String[] deadends, String target) {
        Set<String> deadSet = new HashSet<>(Arrays.asList(deadends));
        
        if (deadSet.contains("0000")) return -1;
        
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        
        Set<String> visited = new HashSet<>();
        visited.add("0000");
        
        int turns = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                
                if (current.equals(target)) return turns;
                
                for (int j = 0; j < 4; j++) {
                    String forward = turnWheel(current, j, 1);
                    if (!deadSet.contains(forward) && !visited.contains(forward)) {
                        queue.offer(forward);
                        visited.add(forward);
                    }
                    
                    String backward = turnWheel(current, j, -1);
                    if (!deadSet.contains(backward) && !visited.contains(backward)) {
                        queue.offer(backward);
                        visited.add(backward);
                    }
                }
            }
            
            turns++;
        }
        
        return -1;
    }
    
    private String turnWheel(String current, int wheel, int direction) {
        char[] chars = current.toCharArray();
        int digit = chars[wheel] - '0';
        
        digit = (digit + direction + 10) % 10;
        chars[wheel] = (char)(digit + '0');
        
        return new String(chars);
    }
}
