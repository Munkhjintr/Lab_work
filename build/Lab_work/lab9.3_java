class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }

    public static ListNode createLinkedListWithCycle(int[] values, int pos) {
        if (values == null || values.length == 0) {
            return null;
        }
        ListNode head = new ListNode(values[0]);
        ListNode current = head;
        ListNode cycleNode = null;

        for (int i = 1; i < values.length; i++) {
            current.next = new ListNode(values[i]);
            current = current.next;
            if (i == pos) {
                cycleNode = current;
            }
        }

        if (pos != -1) {
            current.next = cycleNode;
        }

        return head;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] values1 = {3, 2, 0, -4};
        ListNode cyclicList = createLinkedListWithCycle(values1, 1);
        System.out.println("Cyclic jagsaaltin test: " + solution.hasCycle(cyclicList));

        int[] values2 = {1, 2};
        ListNode nonCyclicList = createLinkedListWithCycle(values2, -1);
        System.out.println("Non-Cyclic jagsaaltin test: " + solution.hasCycle(nonCyclicList));

        int[] values3 = {1};
        ListNode singleNodeList = createLinkedListWithCycle(values3, -1);
        System.out.println("Single Node jagsaaltin test: " + solution.hasCycle(singleNodeList));
    }
}
