class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            elif self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1
def kruskals(n, edges):
    edges = [(edge[0] - 1, edge[1] - 1, edge[2]) for edge in edges]
    edges.sort(key=lambda x: x[2])
    ds = DisjointSet(n)
    total_weight = 0
    edges_used = 0

    for src, dest, weight in edges:
        if ds.find(src) != ds.find(dest):
            ds.union(src, dest)
            total_weight += weight
            edges_used += 1
            if edges_used == n - 1:
                break
    return total_weight
if __name__ == "__main__":
    n, m = map(int, input().split())
    edges = []
    for _ in range(m):
        x, y, w = map(int, input().split())
        edges.append((x, y, w))
    print(kruskals(n, edges))
