import java.util.Random;

class Solution {
    private static final int INSERTION_SORT_THRESHOLD = 10;
    private Random rand = new Random();

    public int[] sortArray(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
        return nums;
    }
    
    private void quickSort(int[] nums, int low, int high) {
        while (low < high) {
            if (high - low + 1 <= INSERTION_SORT_THRESHOLD) {
                insertionSort(nums, low, high);
                break;
            } else {
                int pivotIndex = partition(nums, low, high);
                if (pivotIndex - low < high - pivotIndex) {
                    quickSort(nums, low, pivotIndex - 1);
                    low = pivotIndex + 1;
                } else {
                    quickSort(nums, pivotIndex + 1, high);
                    high = pivotIndex - 1;
                }
            }
        }
    }
    
    private int partition(int[] nums, int low, int high) {
        int randomIndex = rand.nextInt(high - low + 1) + low;
        swap(nums, randomIndex, high);
        int pivot = nums[high];
        int i = low - 1;
        
        for (int j = low; j < high; j++) {
            if (nums[j] < pivot) {
                i++;
                swap(nums, i, j);
            }
        }
        
        swap(nums, i + 1, high);
        return i + 1;
    }
    
    private void insertionSort(int[] nums, int low, int high) {
        for (int i = low + 1; i <= high; i++) {
            int key = nums[i];
            int j = i - 1;
            while (j >= low && nums[j] > key) {
                nums[j + 1] = nums[j];
                j--;
            }
            nums[j + 1] = key;
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
