// CoinChange.java
import java.util.Arrays;

public class CoinChange {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int currentAmount = 1; currentAmount <= amount; currentAmount++) {
            for (int coin : coins) {
                if (coin <= currentAmount) {
                    dp[currentAmount] = Math.min(dp[currentAmount], 1 + dp[currentAmount - coin]);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

// CoinChangeTest.java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CoinChangeTest {
    @Test
    public void testCoinChange() {
        CoinChange solution = new CoinChange();

        int[] coins1 = {1, 2, 5};
        assertEquals(3, solution.coinChange(coins1, 11));

        int[] coins2 = {2};
        assertEquals(-1, solution.coinChange(coins2, 3));

        int[] coins3 = {1, 2, 5};
        assertEquals(0, solution.coinChange(coins3, 0));

        int[] coins4 = {1};
        assertEquals(5, solution.coinChange(coins4, 5));
    }
}
