public class PrimeNumbers {
    public int countPrimes(int n) {
        if (n < 2) {
            return 0;
        }
        boolean[] isPrime = new boolean[n];
        for (int i = 0; i < n; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (isPrime[i]) {
                count++;
            }
        }
        return count;
    }

    public void printPrimeNumbers(int n) {
        System.out.print(" n + "hvrtelh anhnii toonuud" + " bol: ");
        for (int i = 2; i < n; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    private boolean isPrime(int num) {
        if (num < 2) {
            return false;
        }
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class PrimeNumbersTest {
    @Test
    public void testCountPrimes() {
        PrimeNumbers solution = new PrimeNumbers();
        assertEquals(7, solution.countPrimes(18));
        assertEquals(4, solution.countPrimes(10));
        assertEquals(0, solution.countPrimes(1));
        assertEquals(0, solution.countPrimes(2));
        assertEquals(25, solution.countPrimes(100));
    }
}
