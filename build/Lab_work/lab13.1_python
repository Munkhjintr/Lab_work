import heapq

class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX == rootY:
            return False
        if self.rank[rootX] < self.rank[rootY]:
            self.parent[rootX] = rootY
        elif self.rank[rootX] > self.rank[rootY]:
            self.parent[rootY] = rootX
        else:
            self.parent[rootY] = rootX
            self.rank[rootX] += 1
        return True

class Solution:
    def minCostConnectPoints(self, points):
        n = len(points)
        edges = []

        for i in range(n):
            for j in range(i + 1, n):
                weight = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])
                edges.append((weight, i, j))

        edges.sort()  # Sort edges by weight
        uf = UnionFind(n)
        mst_cost = 0
        edges_used = 0

        for weight, u, v in edges:
            if uf.union(u, v):
                mst_cost += weight
                edges_used += 1
                if edges_used == n - 1:
                    break

        return mst_cost

if __name__ == "__main__":
    solution = Solution()
    points1 = [[0, 0], [2, 2], [3, 10], [5, 2], [7, 0]]
    print("Test 1: ", solution.minCostConnectPoints(points1))

    points2 = [[3, 12], [-2, 5], [-4, 1]]
    print("Test 2: ", solution.minCostConnectPoints(points2))
