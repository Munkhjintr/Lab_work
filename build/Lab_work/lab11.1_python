class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        dx = [-1, 0, 1, 0]
        dy = [0, 1, 0, -1]
        
        def is_valid_cell(row, col):
            return 0 <= row < len(grid) and 0 <= col < len(grid[0])
        
        def dfs(row, col):
            grid[row][col] = 2
            perimeter = 0
            for i in range(4):
                new_row = row + dx[i]
                new_col = col + dy[i]
                if not is_valid_cell(new_row, new_col) or grid[new_row][new_col] == 0:
                    perimeter += 1
                elif grid[new_row][new_col] == 1:
                    perimeter += dfs(new_row, new_col)
            return perimeter
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return dfs(i, j)
        
        return 0

grid = [
    [0,1,0,0],
    [1,1,1,0],
    [0,1,0,0],
    [1,1,0,0]
]
solution = Solution()
print(f"Island perimeter: {solution.islandPerimeter(grid)}")
