class Solution {
    int[] dx = {-1, 0, 1, 0};
    int[] dy = {0, 1, 0, -1};
    
    public int islandPerimeter(int[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    return dfs(grid, i, j);
                }
            }
        }
        return 0;
    }
    
    private int dfs(int[][] grid, int row, int col) {
        grid[row][col] = 2;
        int perimeter = 0;
        
        for (int i = 0; i < 4; i++) {
            int newRow = row + dx[i];
            int newCol = col + dy[i];
            
            if (!isValidCell(grid, newRow, newCol) || grid[newRow][newCol] == 0) {
                perimeter += 1;
            }
            else if (grid[newRow][newCol] == 1) {
                perimeter += dfs(grid, newRow, newCol);
            }
        }
        
        return perimeter;
    }
    
    private boolean isValidCell(int[][] grid, int row, int col) {
        return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length;
    }
}
