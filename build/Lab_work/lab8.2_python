from typing import List

def coin_change(coins: List[int], amount: int) -> int:
    dp = [amount + 1] * (amount + 1)
    dp[0] = 0
    for current_amount in range(1, amount + 1):
        for coin in coins:
            if coin <= current_amount:
                dp[current_amount] = min(dp[current_amount], 1 + dp[current_amount - coin])
    return dp[amount] if dp[amount] != amount + 1 else -1

# test_coin_change.py
import unittest
from coin_change import coin_change

class TestCoinChange(unittest.TestCase):
    def test_example_case(self):
        self.assertEqual(coin_change([1, 2, 5], 11), 3)
    
    def test_impossible_amount(self):
        self.assertEqual(coin_change([2], 3), -1)
    
    def test_zero_amount(self):
        self.assertEqual(coin_change([1, 2, 5], 0), 0)
    
    def test_single_coin(self):
        self.assertEqual(coin_change([1], 5), 5)

if __name__ == '__main__':
    unittest.main()

if __name__ == '__main__':
    coins = [1, 2, 5]
    amount = 11
    result = coin_change(coins, amount)
    print(f"hamgiin baga coin heregtei {amount}: {result}")
